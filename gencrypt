#!/usr/bin/env bash
#
# gencrypt - gpg encrypt file(s)
#
# Copyright (c) 2006,2011,2015,2023,2025 by Landon Curt Noll.  All Rights Reserved.
#
# Permission to use, copy, modify, and distribute this software and
# its documentation for any purpose and without fee is hereby granted,
# provided that the above copyright, this permission notice and text
# this comment, and the disclaimer below appear in all of the following:
#
#       supporting documentation
#       source copies
#       source works derived from this source
#       binaries derived from this source or from derived source
#
# LANDON CURT NOLL DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
# INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO
# EVENT SHALL LANDON CURT NOLL BE LIABLE FOR ANY SPECIAL, INDIRECT OR
# CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF
# USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
# OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
#
# chongo (Landon Curt Noll) /\oo/\
#
# http://www.isthe.com/chongo/index.html
# https://github.com/lcn2
#
# Share and enjoy!  :-)


# setup
#
export VERSION="1.6.1 2025-03-28"
NAME=$(basename "$0")
export NAME
#
export V_FLAG=0
#
export NOOP=
export DO_NOT_PROCESS=
export KEEP=
export CODE=0
GPG_TOOL=$(type -P gpg)
export GPG_TOOL
WIPE_TOOL=$(type -P wipe)
export WIPE_TOOL


# usage
#
export USAGE="usage: $NAME [-h] [-v level] [-V] [-n] [-N] [-k] [-g gpg] [-w wipe] key_name file ...

    -h          print help message and exit
    -v level    set verbosity level (def level: $V_FLAG)
    -V          print version string and exit

    -n          go thru the actions, but do not update any files (def: do the action)
    -N          do not process anything, just parse arguments (def: process something)

    -k          keep encrypted file
    -g gpg      path to the gpg tool (def: $GPG_TOOL)
    -w wipe     path to the wipe tool (def: $WIPE_TOOL)

    key_name    gpg key name to encrypt with
    file ...    file(s) to encrypt

Exit codes:
     0         all OK
     1         some internal tool exited non-zero
     2         -h and help string printed or -V and version string printed
     3         command line error
 >= 10         internal error

$NAME version: $VERSION"


# parse command line
#
while getopts :hv:VnNkg:w: flag; do
  case "$flag" in
    h) echo "$USAGE"
        exit 2
        ;;
    v) V_FLAG="$OPTARG"
        ;;
    V) echo "$VERSION"
        exit 2
        ;;
    n) NOOP="-n"
        ;;
    N) DO_NOT_PROCESS="-N"
        ;;
    k) KEEP="true"
        ;;
    g) GPG_TOOL="$OPTARG"
        ;;
    w) WIPE_TOOL="$OPTARG"
        ;;
    \?) echo "$0: ERROR: invalid option: -$OPTARG" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    :) echo "$0: ERROR: option -$OPTARG requires an argument" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
    *) echo "$0: ERROR: unexpected value from getopts: $flag" 1>&2
        echo 1>&2
        echo "$USAGE" 1>&2
        exit 3
        ;;
  esac
done
if [[ $V_FLAG -ge 1 ]]; then
    echo "$0: debug[1]: debug level: $V_FLAG" 1>&2
fi
#
# remove the options
#
shift $(( OPTIND - 1 ));
#
# verify arg count
#
if [[ $# -lt 2 ]]; then
    echo "$0: ERROR: expected at least 2 args, found: $#" 1>&2
    echo "$USAGE" 1>&2
    exit 3
fi
export MY_KEY="$1"
shift


# print running info if verbose
#
# If -v 3 or higher, print exported variables in order that they were exported.
#
if [[ $V_FLAG -ge 3 ]]; then
    echo "$0: debug[3]: VERSION=$VERSION" 1>&2
    echo "$0: debug[3]: NAME=$NAME" 1>&2
    echo "$0: debug[3]: V_FLAG=$V_FLAG" 1>&2
    echo "$0: debug[3]: NOOP=$NOOP" 1>&2
    echo "$0: debug[3]: DO_NOT_PROCESS=$DO_NOT_PROCESS" 1>&2
    echo "$0: debug[3]: KEEP=$KEEP" 1>&2
    echo "$0: debug[3]: CODE=$CODE" 1>&2
    echo "$0: debug[3]: MY_KEY=$MY_KEY" 1>&2
    echo "$0: debug[3]: GPG_TOOL=$GPG_TOOL" 1>&2
    echo "$0: debug[3]: WIPE_TOOL=$WIPE_TOOL" 1>&2
fi


# verify we have the gpg tool
#
if [[ ! -x $GPG_TOOL ]]; then
    echo "$0: ERROR: cannot find gpg tool: $GPG_TOOL" 1>&2
    exit 4
fi


# verify we have the wipe tool
#
if [[ ! -x $WIPE_TOOL ]]; then
    echo "$0: ERROR: cannot find wipe tool: $WIPE_TOOL" 1>&2
    exit 5
fi


# -N stops early before any processing is performed
#
if [[ -n $DO_NOT_PROCESS ]]; then
    if [[ $V_FLAG -ge 3 ]]; then
        echo "$0: debug[3]: arguments parsed, -N given, exiting 0" 1>&2
    fi
    exit 0
fi


# encrypt files
#
while [[ $# -gt 0 ]]; do

    # get next arg
    #
    arg="$1"
    shift
    dir=$(dirname "$arg")
    export dir
    basefile=$(basename "$arg")
    export basefile
    file="$dir/$basefile"
    gpgfile="$file.gpg"

    # firewall
    #
    if [[ ! -e "$file" ]]; then
	echo "$0: ERROR: $arg: $file does not exist, skipping" 1>&2
	CODE=6
	continue
    fi
    if [[ ! -f "$file" ]]; then
	echo "$0: ERROR: $arg: $file is not a file, skipping" 1>&2
	CODE=7
	continue
    fi
    if [[ ! -r "$file" ]]; then
	echo "$0: ERROR: $arg: $file is not readable, skipping" 1>&2
	CODE=8
	continue
    fi
    if [[ ! -w "$dir" ]]; then
	echo "$0: ERROR: $arg: $dir is not in a writable directory, skipping" 1>&2
	CODE=9
	continue
    fi
    if [[ -e "$gpgfile" ]]; then
	echo "$0: ERROR: $arg: $gpgfile exists, skipping" 1>&2
	CODE=10
	continue
    fi

    # encrypt
    #
    if [[ $V_FLAG -ge 1 ]]; then
	echo "$0: debug[1]: encrypting $gpgfile" 1>&2
    fi
    if [[ -z $NOOP ]]; then

	"$GPG_TOOL" -r "$MY_KEY" --gnupg --force-mdc --encrypt-files "$file"
	status="$?"
	if [[ $status -ne 0 ]]; then
	    echo "$0: ERROR: $arg: gpg error code: $status" 1>&2
	    CODE=11
	    continue
	fi
	if [[ ! -f $gpgfile ]]; then
	    echo "$0: ERROR: $arg: missing gpg file: $gpgfile" 1>&2
	    CODE=12
	    continue
	fi
	if [[ ! -s $gpgfile ]]; then
	    echo "$0: ERROR: $arg: empty gpg file: $gpgfile" 1>&2
	    CODE=13
	    continue
	fi
    fi

    # securely remove the old file unless -k
    #
    if [[ -z $NOOP ]]; then
	if [[ -z $KEEP ]]; then
	    if [[ $V_FLAG -ge 1 ]]; then
		echo "$0: debug[1]: wiping old $dir/$basefile" 1<&2
	    fi
	    if [[ ! -w $dir/$basefile ]]; then
		chmod +w "$dir/$basefile" > /dev/null 2>&1
	    fi
	    if [[ ! -w $dir/$basefile ]]; then
		echo "$0: ERROR: $arg: cannot make writable: $basefile" 1>&2
		CODE=14
		continue
	    fi
	    (cd "$dir" && "$WIPE_TOOL" -v "$basefile")
	    status="$?"
	    if [[ $status -ne 0 ]]; then
		echo "$0: ERROR: $arg: wipe error code: $status" 1>&2
		CODE=15
		continue
	    fi
	    if [[ -f $dir/$basefile ]]; then
		echo "$0: ERROR: $arg: wipe did not remove file: $dir/$basefile" 1>&2
		CODE=16
		continue
	    fi
	fi
    fi
done


# All Done!!! -- Jessica Noll, Age 2
#
exit "$CODE"
